# Generated from Expr.g4 by ANTLR 4.13.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,52,409,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,
        2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,
        5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,
        8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,
        1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,
        1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,15,
        1,15,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,
        1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,
        1,20,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,
        1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,
        1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,
        1,27,1,27,1,27,1,27,1,27,1,27,1,28,1,28,5,28,269,8,28,10,28,12,28,
        272,9,28,1,29,4,29,275,8,29,11,29,12,29,276,1,29,1,29,1,30,1,30,
        1,30,1,30,5,30,285,8,30,10,30,12,30,288,9,30,1,30,1,30,1,31,1,31,
        1,31,1,31,5,31,296,8,31,10,31,12,31,299,9,31,1,31,1,31,1,31,1,31,
        1,31,1,32,4,32,307,8,32,11,32,12,32,308,1,33,4,33,312,8,33,11,33,
        12,33,313,1,33,1,33,4,33,318,8,33,11,33,12,33,319,1,34,1,34,5,34,
        324,8,34,10,34,12,34,327,9,34,1,34,1,34,1,35,1,35,1,35,1,35,1,35,
        1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,36,
        1,36,1,36,1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,37,1,37,
        1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,
        1,37,1,38,1,38,1,39,1,39,1,40,1,40,1,41,1,41,1,42,1,42,1,43,1,43,
        1,43,1,43,3,43,390,8,43,1,44,1,44,1,45,1,45,1,46,1,46,1,46,1,47,
        1,47,1,47,1,48,1,48,1,49,1,49,1,50,1,50,1,51,1,51,2,297,325,0,52,
        1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,
        27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,
        49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,
        71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,
        93,47,95,48,97,49,99,50,101,51,103,52,1,0,27,2,0,67,67,99,99,2,0,
        82,82,114,114,2,0,69,69,101,101,2,0,65,65,97,97,2,0,84,84,116,116,
        2,0,66,66,98,98,2,0,76,76,108,108,2,0,80,80,112,112,2,0,73,73,105,
        105,2,0,77,77,109,109,2,0,89,89,121,121,2,0,75,75,107,107,2,0,78,
        78,110,110,2,0,79,79,111,111,2,0,85,85,117,117,2,0,81,81,113,113,
        2,0,83,83,115,115,2,0,86,86,118,118,2,0,70,70,102,102,2,0,87,87,
        119,119,2,0,72,72,104,104,2,0,68,68,100,100,3,0,65,90,95,95,97,122,
        4,0,48,57,65,90,95,95,97,122,3,0,9,10,13,13,32,32,2,0,10,10,13,13,
        1,0,48,57,417,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,
        9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,
        19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,
        29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,
        39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,
        49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,
        59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,
        69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,
        79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,
        89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,
        99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,1,105,1,0,0,0,3,112,1,0,0,
        0,5,118,1,0,0,0,7,126,1,0,0,0,9,130,1,0,0,0,11,134,1,0,0,0,13,139,
        1,0,0,0,15,146,1,0,0,0,17,153,1,0,0,0,19,158,1,0,0,0,21,165,1,0,
        0,0,23,172,1,0,0,0,25,177,1,0,0,0,27,183,1,0,0,0,29,189,1,0,0,0,
        31,192,1,0,0,0,33,196,1,0,0,0,35,201,1,0,0,0,37,208,1,0,0,0,39,212,
        1,0,0,0,41,215,1,0,0,0,43,222,1,0,0,0,45,226,1,0,0,0,47,234,1,0,
        0,0,49,242,1,0,0,0,51,247,1,0,0,0,53,252,1,0,0,0,55,257,1,0,0,0,
        57,266,1,0,0,0,59,274,1,0,0,0,61,280,1,0,0,0,63,291,1,0,0,0,65,306,
        1,0,0,0,67,311,1,0,0,0,69,321,1,0,0,0,71,330,1,0,0,0,73,343,1,0,
        0,0,75,354,1,0,0,0,77,375,1,0,0,0,79,377,1,0,0,0,81,379,1,0,0,0,
        83,381,1,0,0,0,85,383,1,0,0,0,87,389,1,0,0,0,89,391,1,0,0,0,91,393,
        1,0,0,0,93,395,1,0,0,0,95,398,1,0,0,0,97,401,1,0,0,0,99,403,1,0,
        0,0,101,405,1,0,0,0,103,407,1,0,0,0,105,106,7,0,0,0,106,107,7,1,
        0,0,107,108,7,2,0,0,108,109,7,3,0,0,109,110,7,4,0,0,110,111,7,2,
        0,0,111,2,1,0,0,0,112,113,7,4,0,0,113,114,7,3,0,0,114,115,7,5,0,
        0,115,116,7,6,0,0,116,117,7,2,0,0,117,4,1,0,0,0,118,119,7,7,0,0,
        119,120,7,1,0,0,120,121,7,8,0,0,121,122,7,9,0,0,122,123,7,3,0,0,
        123,124,7,1,0,0,124,125,7,10,0,0,125,6,1,0,0,0,126,127,7,11,0,0,
        127,128,7,2,0,0,128,129,7,10,0,0,129,8,1,0,0,0,130,131,7,12,0,0,
        131,132,7,13,0,0,132,133,7,4,0,0,133,10,1,0,0,0,134,135,7,12,0,0,
        135,136,7,14,0,0,136,137,7,6,0,0,137,138,7,6,0,0,138,12,1,0,0,0,
        139,140,7,14,0,0,140,141,7,12,0,0,141,142,7,8,0,0,142,143,7,15,0,
        0,143,144,7,14,0,0,144,145,7,2,0,0,145,14,1,0,0,0,146,147,7,8,0,
        0,147,148,7,12,0,0,148,149,7,16,0,0,149,150,7,2,0,0,150,151,7,1,
        0,0,151,152,7,4,0,0,152,16,1,0,0,0,153,154,7,8,0,0,154,155,7,12,
        0,0,155,156,7,4,0,0,156,157,7,13,0,0,157,18,1,0,0,0,158,159,7,17,
        0,0,159,160,7,3,0,0,160,161,7,6,0,0,161,162,7,14,0,0,162,163,7,2,
        0,0,163,164,7,16,0,0,164,20,1,0,0,0,165,166,7,16,0,0,166,167,7,2,
        0,0,167,168,7,6,0,0,168,169,7,2,0,0,169,170,7,0,0,0,170,171,7,4,
        0,0,171,22,1,0,0,0,172,173,7,18,0,0,173,174,7,1,0,0,174,175,7,13,
        0,0,175,176,7,9,0,0,176,24,1,0,0,0,177,178,7,19,0,0,178,179,7,20,
        0,0,179,180,7,2,0,0,180,181,7,1,0,0,181,182,7,2,0,0,182,26,1,0,0,
        0,183,184,7,13,0,0,184,185,7,1,0,0,185,186,7,21,0,0,186,187,7,2,
        0,0,187,188,7,1,0,0,188,28,1,0,0,0,189,190,7,5,0,0,190,191,7,10,
        0,0,191,30,1,0,0,0,192,193,7,3,0,0,193,194,7,16,0,0,194,195,7,0,
        0,0,195,32,1,0,0,0,196,197,7,21,0,0,197,198,7,2,0,0,198,199,7,16,
        0,0,199,200,7,0,0,0,200,34,1,0,0,0,201,202,7,14,0,0,202,203,7,7,
        0,0,203,204,7,21,0,0,204,205,7,3,0,0,205,206,7,4,0,0,206,207,7,2,
        0,0,207,36,1,0,0,0,208,209,7,16,0,0,209,210,7,2,0,0,210,211,7,4,
        0,0,211,38,1,0,0,0,212,213,7,8,0,0,213,214,7,16,0,0,214,40,1,0,0,
        0,215,216,7,21,0,0,216,217,7,2,0,0,217,218,7,6,0,0,218,219,7,2,0,
        0,219,220,7,4,0,0,220,221,7,2,0,0,221,42,1,0,0,0,222,223,5,73,0,
        0,223,224,5,78,0,0,224,225,5,84,0,0,225,44,1,0,0,0,226,227,5,86,
        0,0,227,228,5,65,0,0,228,229,5,82,0,0,229,230,5,67,0,0,230,231,5,
        72,0,0,231,232,5,65,0,0,232,233,5,82,0,0,233,46,1,0,0,0,234,235,
        5,68,0,0,235,236,5,69,0,0,236,237,5,67,0,0,237,238,5,73,0,0,238,
        239,5,77,0,0,239,240,5,65,0,0,240,241,5,76,0,0,241,48,1,0,0,0,242,
        243,5,67,0,0,243,244,5,72,0,0,244,245,5,65,0,0,245,246,5,82,0,0,
        246,50,1,0,0,0,247,248,5,68,0,0,248,249,5,65,0,0,249,250,5,84,0,
        0,250,251,5,69,0,0,251,52,1,0,0,0,252,253,5,84,0,0,253,254,5,73,
        0,0,254,255,5,77,0,0,255,256,5,69,0,0,256,54,1,0,0,0,257,258,5,68,
        0,0,258,259,5,65,0,0,259,260,5,84,0,0,260,261,5,69,0,0,261,262,5,
        84,0,0,262,263,5,73,0,0,263,264,5,77,0,0,264,265,5,69,0,0,265,56,
        1,0,0,0,266,270,7,22,0,0,267,269,7,23,0,0,268,267,1,0,0,0,269,272,
        1,0,0,0,270,268,1,0,0,0,270,271,1,0,0,0,271,58,1,0,0,0,272,270,1,
        0,0,0,273,275,7,24,0,0,274,273,1,0,0,0,275,276,1,0,0,0,276,274,1,
        0,0,0,276,277,1,0,0,0,277,278,1,0,0,0,278,279,6,29,0,0,279,60,1,
        0,0,0,280,281,5,45,0,0,281,282,5,45,0,0,282,286,1,0,0,0,283,285,
        8,25,0,0,284,283,1,0,0,0,285,288,1,0,0,0,286,284,1,0,0,0,286,287,
        1,0,0,0,287,289,1,0,0,0,288,286,1,0,0,0,289,290,6,30,0,0,290,62,
        1,0,0,0,291,292,5,47,0,0,292,293,5,42,0,0,293,297,1,0,0,0,294,296,
        9,0,0,0,295,294,1,0,0,0,296,299,1,0,0,0,297,298,1,0,0,0,297,295,
        1,0,0,0,298,300,1,0,0,0,299,297,1,0,0,0,300,301,5,42,0,0,301,302,
        5,47,0,0,302,303,1,0,0,0,303,304,6,31,0,0,304,64,1,0,0,0,305,307,
        7,26,0,0,306,305,1,0,0,0,307,308,1,0,0,0,308,306,1,0,0,0,308,309,
        1,0,0,0,309,66,1,0,0,0,310,312,7,26,0,0,311,310,1,0,0,0,312,313,
        1,0,0,0,313,311,1,0,0,0,313,314,1,0,0,0,314,315,1,0,0,0,315,317,
        5,46,0,0,316,318,7,26,0,0,317,316,1,0,0,0,318,319,1,0,0,0,319,317,
        1,0,0,0,319,320,1,0,0,0,320,68,1,0,0,0,321,325,5,39,0,0,322,324,
        9,0,0,0,323,322,1,0,0,0,324,327,1,0,0,0,325,326,1,0,0,0,325,323,
        1,0,0,0,326,328,1,0,0,0,327,325,1,0,0,0,328,329,5,39,0,0,329,70,
        1,0,0,0,330,331,5,39,0,0,331,332,7,26,0,0,332,333,7,26,0,0,333,334,
        7,26,0,0,334,335,7,26,0,0,335,336,5,45,0,0,336,337,7,26,0,0,337,
        338,7,26,0,0,338,339,5,45,0,0,339,340,7,26,0,0,340,341,7,26,0,0,
        341,342,5,39,0,0,342,72,1,0,0,0,343,344,5,39,0,0,344,345,7,26,0,
        0,345,346,7,26,0,0,346,347,5,58,0,0,347,348,7,26,0,0,348,349,7,26,
        0,0,349,350,5,58,0,0,350,351,7,26,0,0,351,352,7,26,0,0,352,353,5,
        39,0,0,353,74,1,0,0,0,354,355,5,39,0,0,355,356,7,26,0,0,356,357,
        7,26,0,0,357,358,7,26,0,0,358,359,7,26,0,0,359,360,5,45,0,0,360,
        361,7,26,0,0,361,362,7,26,0,0,362,363,5,45,0,0,363,364,7,26,0,0,
        364,365,7,26,0,0,365,366,7,26,0,0,366,367,7,26,0,0,367,368,5,58,
        0,0,368,369,7,26,0,0,369,370,7,26,0,0,370,371,5,58,0,0,371,372,7,
        26,0,0,372,373,7,26,0,0,373,374,5,39,0,0,374,76,1,0,0,0,375,376,
        5,40,0,0,376,78,1,0,0,0,377,378,5,41,0,0,378,80,1,0,0,0,379,380,
        5,44,0,0,380,82,1,0,0,0,381,382,5,59,0,0,382,84,1,0,0,0,383,384,
        5,61,0,0,384,86,1,0,0,0,385,386,5,33,0,0,386,390,5,61,0,0,387,388,
        5,60,0,0,388,390,5,62,0,0,389,385,1,0,0,0,389,387,1,0,0,0,390,88,
        1,0,0,0,391,392,5,62,0,0,392,90,1,0,0,0,393,394,5,60,0,0,394,92,
        1,0,0,0,395,396,5,62,0,0,396,397,5,61,0,0,397,94,1,0,0,0,398,399,
        5,60,0,0,399,400,5,61,0,0,400,96,1,0,0,0,401,402,5,43,0,0,402,98,
        1,0,0,0,403,404,5,45,0,0,404,100,1,0,0,0,405,406,5,42,0,0,406,102,
        1,0,0,0,407,408,5,47,0,0,408,104,1,0,0,0,10,0,270,276,286,297,308,
        313,319,325,389,1,6,0,0
    ]

class ExprLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    CREATE = 1
    TABLE = 2
    PRIMARY = 3
    KEY = 4
    NOT = 5
    NULL = 6
    UNIQUE = 7
    INSERT = 8
    INTO = 9
    VALUES = 10
    SELECT = 11
    FROM = 12
    WHERE = 13
    ORDER = 14
    BY = 15
    ASC = 16
    DESC = 17
    UPDATE = 18
    SET = 19
    IS = 20
    DELETE = 21
    INT = 22
    VARCHAR = 23
    DECIMAL = 24
    CHAR = 25
    DATE = 26
    TIME = 27
    DATETIME = 28
    ID = 29
    WS = 30
    COMENTARIO_SIMPLE = 31
    COMENTARIO_MULTILINEA = 32
    INT_LITERAL = 33
    FLOAT_LITERAL = 34
    CHAR_LITERAL = 35
    DATE_LITERAL = 36
    TIME_LITERAL = 37
    DATETIME_LITERAL = 38
    PARENTESIS_IZQ = 39
    PARENTESIS_DER = 40
    COMA = 41
    PUNTO_Y_COMA = 42
    IGUAL = 43
    DIFERENTE = 44
    MAYOR = 45
    MENOR = 46
    MAYOR_O_IGUAL = 47
    MENOR_O_IGUAL = 48
    MAS = 49
    MENOS = 50
    PRODUCTO = 51
    DIVISION = 52

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'INT'", "'VARCHAR'", "'DECIMAL'", "'CHAR'", "'DATE'", "'TIME'", 
            "'DATETIME'", "'('", "')'", "','", "';'", "'='", "'>'", "'<'", 
            "'>='", "'<='", "'+'", "'-'", "'*'", "'/'" ]

    symbolicNames = [ "<INVALID>",
            "CREATE", "TABLE", "PRIMARY", "KEY", "NOT", "NULL", "UNIQUE", 
            "INSERT", "INTO", "VALUES", "SELECT", "FROM", "WHERE", "ORDER", 
            "BY", "ASC", "DESC", "UPDATE", "SET", "IS", "DELETE", "INT", 
            "VARCHAR", "DECIMAL", "CHAR", "DATE", "TIME", "DATETIME", "ID", 
            "WS", "COMENTARIO_SIMPLE", "COMENTARIO_MULTILINEA", "INT_LITERAL", 
            "FLOAT_LITERAL", "CHAR_LITERAL", "DATE_LITERAL", "TIME_LITERAL", 
            "DATETIME_LITERAL", "PARENTESIS_IZQ", "PARENTESIS_DER", "COMA", 
            "PUNTO_Y_COMA", "IGUAL", "DIFERENTE", "MAYOR", "MENOR", "MAYOR_O_IGUAL", 
            "MENOR_O_IGUAL", "MAS", "MENOS", "PRODUCTO", "DIVISION" ]

    ruleNames = [ "CREATE", "TABLE", "PRIMARY", "KEY", "NOT", "NULL", "UNIQUE", 
                  "INSERT", "INTO", "VALUES", "SELECT", "FROM", "WHERE", 
                  "ORDER", "BY", "ASC", "DESC", "UPDATE", "SET", "IS", "DELETE", 
                  "INT", "VARCHAR", "DECIMAL", "CHAR", "DATE", "TIME", "DATETIME", 
                  "ID", "WS", "COMENTARIO_SIMPLE", "COMENTARIO_MULTILINEA", 
                  "INT_LITERAL", "FLOAT_LITERAL", "CHAR_LITERAL", "DATE_LITERAL", 
                  "TIME_LITERAL", "DATETIME_LITERAL", "PARENTESIS_IZQ", 
                  "PARENTESIS_DER", "COMA", "PUNTO_Y_COMA", "IGUAL", "DIFERENTE", 
                  "MAYOR", "MENOR", "MAYOR_O_IGUAL", "MENOR_O_IGUAL", "MAS", 
                  "MENOS", "PRODUCTO", "DIVISION" ]

    grammarFileName = "Expr.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


